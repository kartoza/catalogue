

%------leave this line and the two above it

= Catalogue Schema : Orders =

**Note:** Before reading this section please read & understand the products schema notes.

The purpose of the order application logic is to allow a user to easily order one or
more products. Since each order can consist of one or more products, and each
product can be included in many orders, a 'many to many' relationship exists
between products and orders. This is realised via the **SearchRecord** model.
This SearchRecord model is also described in the Search section. As a recap,
the process of creating SearchRecords is achived by carrying out a search.
Initially when a search is carried out, SearchRecords are transient - that is,
they are not persisted in the databse. Once a user adds a SearchRecord
(representing a single product) to their basket, the SearchRecord is assigned a
User id and persisted in the database. A users basket or cart is thus the
collection of SearchRecords owned by them but that have no Order allocated to
them.

At the point of deciding to proceed with an order, the user is directed to the
Order page, a wireframe for which is shown below.

[img/order-wireframe.png]

The purpose of the order page is to allow the user to specify details relating
to their intended order and to proceed with the order initiation thereafter.
Two levels of customisation are allowed for when creating an order:

+ options that are global to the order can be defined
+ options that are specific to each product within the order can be defined
(overriding the global options where applicable)
+

The specific global and options are specified in the sections that follow. The
global versus option specification process is also illustrated in the wireframe
provided above.

== Schema ==

The schema relating to product orders can be summarised as follows:

[img/product-orders.png]

This schema will be explained in more detail in the sections that follow.

We can express the above diagram verbally:

- Orders are instances of the Order model
- Each order has one or more SearchRecords associated with it
- Each order has a DeliveryDetail record associated with it
- Each SearchRecord //optionally// has a DeliveryDetail record associated with it
- An Order is owned by a User
- Each SearchRecord is owned by a User (which should match the Order owner)
- The DeliveryDetail record associated with an Order encapsulate the
  Projection, Datum, Processing level, Resampling Method and File Format that
  **all** the products of that order should be delivered in.
- The DeliveryDetail record associated with an SearchRecord encapsulate the
  Projection, Datum, Processing level, Resampling Method and File Format that
  the **specific product**  associated with that SearchRecord should be
  delivered in.
- Each order has a current order status and history of OrderStatus records.

== Filtering of CRS's ==

The projections list can be long and irrelevant for many images if the complete
list is shown. Thus the following logic applies:

- For single product properties, when listing utm zones for the projection
  combo, only the zone in which the image centroid falls, and the two zones to
  either side of that are shown.
- For Order records, only utm zones that intersect with the centroids of one or
  more of the products listed in the order should be listed, along with the two
  adjacent zones on either side of each image. 
- EPSG:4326 Geographic is always listed
- EPSG:900913 Google Mercator is always listed
-


