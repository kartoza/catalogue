= Developer Guide =

== Set your ssh config up ==

To get started, first add an entry like this to your ssh config file in ~/.ssh/config:

```
Host linfiniti2
  Port 8697
  HostName 188.40.123.80
  FallBackToRsh no
```

== Checkout Sources ==

Then setup a working dir and check out the sources (you can adapt dirs / paths
as needed, using these paths will keep you consistent with all setup notes but
its not required).

```
cd /home
sudo mkdir web
sudo chown -R <username>.<username> web
cd web
mkdir sac
git clone git@linfiniti2:sac_catalogue.git sac_catalogue
```

Then follow the instructions in README, skipping sections on informix, building
gdal from source and source code checkout (you already checked it out if you
have the readme :-)

== Load a database dump ==

A recent database dump can be obtained from:

```
http://196.35.94.243/sac_postgis_01February2011.dmp
```

= Working with Git =

Each devloper works on a remote branch, others can track a specific branch
locally and try out implemented features. After approving implementation,
branch is merged with HEAD. (possibly closed/removed from tree)

This commands are based on http://www.eecs.harvard.edu/~cduan/technical/git/


== Getting a list of branches ==

For local branches do:

```
git branch -v
```

For remote branches do:

```
git branch -r -v
```

== To create remote branch ==

For current versions of git (at least git 1.7 or better). Say we want to create
a new branch called 'docs-branch':

```
git branch docs-branch
git push --set-upstream origin docs-branch
git checkout docs-branch
```


== Working with a remote branch ==

To be able to work with a remote branch locally (if it already exists
remotely), we must create local branch and setup tracking of remote branch. 

```
git pull #your local repo must be up to date first
git branch --track new-branch origin/new-branch
git checkout new-branch
```

Now you can go on to do your work in that branch.

To pull changes from remote repo do:

```
git pull origin
```

== Deleting branches ==

Once you are done with a branch, you can delete it. For a local branch do:

```
git branch -d new-branch
```

To delete a remote branch do (after first deleting it locally):

```
git push origin :new-branch
```

== Distributed Git Repository Topology ==

The repositories are arranged like this:

[img/git-topology.png]

The orasac master repo must pull from the linfiniti2 server at regular (e.g.
weekly) intervals using a command like this:

```
cd /opt/git/sac_catalogue
git pull git@linfiniti2:sac_catalogue.git

```

If changes have happened on the SAC side and committed to the repository on
orasac1, those changes should be pushed over to the catalogue on linfiniti2 so
that the two repos are in sync:

```
cd /opt/git/sac_catalogue
git push git@linfiniti2:sac_catalogue.git
```


Note that orasac1 also has an entry in /home/timlinux/.ssh/config like this:

```
Host linfiniti2
  HostName 188.40.123.80
  User timlinux
  Port 8697

```

The lion live and test instances are cloned from the orasac1 repo like this:

```
git clone timlinux@orasac1:/opt/git/sac_catalogue sac_live
git clone timlinux@orasac1:/opt/git/sac_catalogue sac_test
```

The instance on linfiniti2 gitosis was cloned in the same way into
/opt/git/repositories/sac_catalogue.

For the Tim / Drazen / Alessandro clones, the clone was carried out as
described in the first section of this doc.


== Tracking branches from linfiniti with a master checkout from orasac ==

In this scenario, we want to be tracking master from orasac1 but occationally
pulling down branches from linfiniti2 to test them under
lion:/opt/sac_catalogue/sac_test. Make sure you have a linfiniti2 entry in your
~/.ssh/config as described further up in this document.

```
git remote add linfiniti2 git@linfiniti2:sac_catalogue.gi
git fetch linfiniti2
```

You should see something like the output below showing you that the branches
from the secondary remote repository:

```
The authenticity of host '[188.40.123.80]:8697 ([188.40.123.80]:8697)' can't be established.
RSA key fingerprint is cd:86:2b:8c:45:61:ae:15:13:45:95:25:8e:9a:6f:c4.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added '[188.40.123.80]:8697' (RSA) to the list of known hosts.
 _ _        __ _       _ _   _ 
| (_)_ __  / _(_)_ __ (_) |_(_)
| | | '_ \| |_| | '_ \| | __| |
| | | | | |  _| | | | | | |_| |
|_|_|_| |_|_| |_|_| |_|_|\__|_|
 
 -- Authorized Access Only --                              
Enter passphrase for key '/home/timlinux/.ssh/id_dsa': 
remote: Counting objects: 201, done.
remote: Compressing objects: 100% (150/150), done.
remote: Total 150 (delta 103), reused 0 (delta 0)
Receiving objects: 100% (150/150), 1.10 MiB | 47 KiB/s, done.
Resolving deltas: 100% (103/103), completed with 28 local objects.
From linfiniti2:sac_catalogue
 * [new branch]      ale        -> linfiniti2/ale
 * [new branch]      ale_test   -> linfiniti2/ale_test
 * [new branch]      map_resize -> linfiniti2/map_resize
 * [new branch]      master     -> linfiniti2/master
 * [new branch]      tim-model-refactor-off-ale -> linfiniti2/tim-model-refactor-off-ale
`

```

Now we are ready to check out the branch from there e.g.:

```
git branch map_resize linfiniti2/map_resize
git pull #not sure if needed
git checkout map_resize
sudo /etc/init.d/apache2 reload
```

When you want to get back to the original again do:

```
git checkout origin/master
```



= System logic and rules =

== Computation of geometric_accuracy_mean ==

The geometric accuracy of a product is calculated as the mean of its
geometric_resolution_x, geometric_resolution_y.

The values for geometric_resolution_x, geometric_resolution_y will vary per
sensor and per mode. According to the following table:

(SAC to provide required detail here).

------------ TABLE PLACEHOLDER -------------------


== Sensor viewing angle ==






The sensor viewing angle 




= Updates and imports of products =

vim /mnt/cataloguestorage/thumbnail_processing/thumb_blobs/lastblob.txt

Set desired blob no in above file.

python manage.py runscript --pythonpath=scripts -v 2 acs_importer
