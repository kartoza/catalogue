

% Leave the blank space above here

= Procedures for importing data from Terrasar-x packages into the catalogue =

""Note:"" This document should be considered compulsory reading before you
attempt to import any data into the catalogue.

""Note2:"" This document //must// be kept up to date when you make changes to
import scripts etc.

== Importing the packages from a local folder ==

The import process is done by a Django management command that can be called
by a cron job.

To see all available options you can call the command with `-h` or `help`
parameter:

```
$ python manage.py terrasar_harvest -h
Usage: manage.py terrasar_harvest [options]

Imports Terrasar packages into the SAC catalogue

Options:
  -v VERBOSITY, --verbosity=VERBOSITY
                        Verbosity level; 0=minimal output, 1=normal output,
                        2=all output
  --settings=SETTINGS   The Python path to a settings module, e.g.
                        "myproject.settings.main". If this isn't provided, the
                        DJANGO_SETTINGS_MODULE environment variable will be
                        used.
  --pythonpath=PYTHONPATH
                        A directory to add to the Python path, e.g.
                        "/home/djangoprojects/myproject".
  --traceback           Print traceback on exception
  -b INDEX_URL, --index_url=INDEX_URL
                        Base catalogue URL. Defaults is read from settings.py.
  -t, --test_only       Just test, nothing will be written into the DB.
  -o OWNER, --owner=OWNER
                        Name of the Institution package owner. Defaults to:
                        Infoterra.
  -s CREATING_SOFTWARE, --creating_software=CREATING_SOFTWARE
                        Name of the creating software. Defaults to: Unknown.
  -l LICENSE, --license=LICENSE
                        Name of the license. Defaults to: SAC Commercial
                        License
  -a AREA, --area=AREA  Area of interest, images which are external to this
                        area will not be imported (WKT Polygon, SRID=4326)
  -q QUALITY, --quality=QUALITY
                        Quality code (will be created if does not exists).
                        Defaults to: Unknown
  -r PROCESSING_LEVEL, --processing_level=PROCESSING_LEVEL
                        Processing level code (will be created if does not
                        exists). Defaults to: 1B
  -m MAXPRODUCTS, --maxproducts=MAXPRODUCTS
                        Import at most n products.
  -f, --force_update    Force an update for exists products, default behavior
                        is to skip exists products.
  --version             show program's version number and exit
  -h, --help            show this help message and exit
```

Running the command:
```
python manage.py terrasar_harvest -m 16 -v 2 -b 'http://localhost/terrasar.zip' -a 'POLYGON(( 12 3, 23 3, 23 2, 12 2, 12 3))' -f
```



== Global settings ==

The following parameters in settings.py control the process:

```
CATALOGUE_TERRASAR_SHP_ZIP_URL = 'http://terrasar-x-archive.infoterra.de/archive/ows?service=WFS&version=1.0.0&request=GetFeature&typeName=archive:archive&outputFormat=SHAPE-ZIP'
```

== Implementation details ==


=== Data and metadata extraction ===


The following metadata are hardcoded constants and can be changed at the top of the script `catalogue/management/commands/terrasar_harvest.py`:


|| Parameter            | Value |
| band_count            | 5 |
| radiometric_resolution | 16 |
| mission_sensor | SAR |
| mission | TSX |
| projection | ORBIT |


The following metadata are passed to the script as option parameters:

|| Parameter            | Default                |
| license               | SAC Commercial License |
| owner                 | Infoterra |
| processing_level      | 1B2                     |
| creating_software     | Unknown                |


The following metadata are read from the metadata or the footprint:

|| Parameter              | From |
| geometric_resolution_x  | resolution [1] |
| geometric_resolution_y  | resolution [1] |
| path                    | from footprint centroid |
| row                     | from footprint centroid |
| orbit                   | rel_orbit |
| polarising_mode         | pol_mod |
| imaging_mode            | img_mod |
| sensor_type             | img_mod, pol_mod |
| acquisition_mode        | pol_chan [2] |
| incidence_angle         | avg(inc_min, inc_max) |
| metadata                | metadata (the whole) |

[1] the resolution field is a string field like: "Approximated Resolution Range: 3,5 - 3,3 m", the values are extracted and an average calculated.
[2] Slashes are stripped.
