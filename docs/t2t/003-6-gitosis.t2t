

% Leave above lines blank
== Hosting GIT Repos using gitosis ==

See also [http://blog.agdunn.net/?p=277 this page]. The idea is that we set up
a single user account ('git') which proxies commit into the repo and has not
shell access. We then add each ssh key for each user that wants access to the
repo, assign the user to one or more groups and they can get busy.

=== Set up the server side ===

**Note:** The gitosis repos are hosted on 'orasac1'.

Assuming only your pub ssh key is in authorised keys:

```
sudo apt-get install gitosis
sudo adduser --system --shell /bin/sh --gecos 'git version control' \
             --group --disabled-password --home /opt/git git
sudo -H -u git gitosis-init < /home/timlinux/.ssh/authorized_keys2

```

=== Allow ssh access to git user ===

Edit /etc/ssh/sshd_config and add git to AllowUsers list then restart ssh:

```
sudo /etc/init.d/ssh restart
```

=== Check out gitosis admin on the client ===

```
mkdir -p ~/dev/gitosis
cd ~/dev/gitosis
git clone git@orasac1:gitosis-admin.git sansa-gitosis-admin
```

=== Adding a user, group and project ===

```
cd sansa-gitosis-admin
```

Now copy the users pub key into keydir naming it after the user@name listed in their key e.g.:

```
vim keydir/cstephens@cstephens-nb1.pub
```

In this example we are adding access to Casey (I will put him in the admin group too so that he can add more users later). The contents of his keyfile look like this (based on his ssh public key):

```
ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA3WKItKSQU3mtrXwq3P64XM9ChN+exWq69c/q1lWsi/X8yzfbMM9I3Mst+wbFmTS4rWWy2xU7H5ES1CeHo9QS6GECMJNSp5EiGSIKCmY3IEwaYuxg4TJVABXwCmJ3MSWRXOFMq1uooaiG4u5SKWQPJWMgOh41RnEClxLoS2X6sweMPYFlURNTjLja2hCFDROxJaZ2+95/nvjkw2LxihTgeJOGUCmGvGGRHfwZK5HyehqxqZFLrUjHjtzO5h3yOWgGhdjja12A7RHqLkrZtH7ftY9K8/4O2nAp2IpufWWi6LiGBQrk85bX4JhC/B3lQkbH1MiVM55DzsUJFr/xQuw+FQ== cstephens@cstephens-nb1
```

**Note:** The .pub extension is REQUIRED

Then edit gitosis.conf. Add each admin user into the members list for the gitosis-admin group e.g.:

```
[gitosis]

[group gitosis-admin]
writable = gitosis-admin
members = tim@linfiniti.com cstephens@sansa.org.za

```

For a new project, add a new group and repo clause like this:

```
[group sac_catalogue_committers]
writable = sac_catalogue
members = tim@linfiniti.com cstephens@sansa.org.za

[repo sac_catalogue]
gitweb = no
description = SANSA Catalogue
owner = SANSA
daemon = no
```

**Note:** The .pub extension is not used in the conf file.

We will add entries for the sansa fork of QGIS too (we will need to add Christoph and Riaan to this group).

```
[group sansa_qgis_committers]
writable = sac_catalogue
members = tim@linfiniti.com cstephens@sansa.org.za

[repo qgis]
gitweb = no
description = SANSA Catalogue
owner = SANSA
daemon = no

```

**Note:** The writeable list in each group should contain a list of those repos
that members of that group can write (commit) to. Typically you will want to
give the gitosis admin group write permissions to all repos, so each time you
add a new repo, update the group like this:

```
[group gitosis-admin]
writable = gitosis-admin sac_catalogue qgis
```

To add a user to an existing project follow the steps above, but just append
their key name to the members list.

Now and the new files, commit and push:

```
git add keydir/*
git add gitosis.conf
git commit -m "Set up project for SANSA Catalogue"
git push
```




=== Create a new empty gitosis hosted repo ===

The last step is to actually create the repo we defined above (in this case
sac_catalogue) and push it up to the server.

```
cd /home/web
mkdir sac_catalogue
cd sac_catalogue
git init
git add .
git remote add origin git@orasac1:sac_catalogue.git
git commit
```

You need to add something to your repo before trying to push it up to the
master, so I just put in a .gitignore to start, commit it then push up.

```
touch .gitignore
git add .gitignore
git commit -m "Added ignore file"
git push origin master
```

You should get a message like:

```
Counting objects: 3, done.
Writing objects: 100% (3/3), 221 bytes, done.
Total 3 (delta 0), reused 0 (delta 0)
To git@orasac1:sac_catalogue.git
 * [new branch]      master -> master
```

If you got something like this instead:

```
# git push origin master
error: src refspec master does not match any.
fatal: The remote end hung up unexpectedly
```

Its just a symptom that your repo is empty. Add the .gitignore, commit it
locally and then try to push it up to the server again.


**Note**: It is possible to provide anonymous access to this repo too using
git-daemon. See the article mentioned at the start of this section for more
info.


=== Hosting a clone of an upstream repo in gitosis ===

Here we want to host a copy of a git repository from upstream and make it available to internal SANSA developers. We will check out the linfiniti git repo in this case:

(On orasac1)

```
sudo su - git
bash
cd repotositories
vim ~/.ssh/config
```

Add the following to the ssh config for git user (we have configured read only access for this user):

```
Host linfiniti2
  User git
  Port 8697
  HostName 188.40.123.80
  FallBackToRsh no

```

Now clone the upstream repo:


```

git@orasac01:~/repositories$ git clone --bare git@linfiniti2:qgis.git
```


On your local machine, you can now clone QGIS, work on it, commit your changes to orasac1. When you would like your changes to be merged into QGIS, you email a pull request to linfiniti, we then pull your changes and commit them to svn. To keep the orasac1 copy 'fresh' (synchronised with upstream) a cron job should be configure to pull changes regularly to it.

=== Check out an existing repo ===


You should not need to do the above for the QGIS and SANSA Catalogue projects since they already exist and are populated. Above process is for when you want to create a new, empty repo.


The sac_catalogue sources can be checked out like this:

```
git clone git@orasac1:sac_catalogue.git sac_catalogue

```

Similarly the SANSA QGIS fork can be checked out like this:

```
git clone git@orasac1:qgis.git qgis
```


