#
# Production server with UWSGI configured to run on port 8080
#
# docker-compose build
# docker-compose up -d web
#
# See accompanying Make commands for easy collectstatic etc.

# Our main nginx service - this is for testing only - normally
# You would use a standalone nginx instance running on the host!
version: "3.4"
services:
  nginx:
    # Note you cannot scale if you use conteiner_name
    container_name: catalogue-nginx
    image: nginx:1.21.3
    hostname: nginx
    volumes:
      - ./nginx-conf:/etc/nginx/conf.d
    ports:
      - "0.0.0.0:80:80"
    restart: on-failure:5

  smtp:
    # Note you cannot scale if you use conteiner_name
    container_name: catalogue-smtp
    image: catatnight/postfix
    hostname: postfix
    environment:
      # You could change this to something more suitable
      - maildomain=kartoza.com
      - smtp_user=noreply:docker
    restart: on-failure:5

  db:
    # Note you cannot scale if you use conteiner_name
    container_name: catalogue-db
    image: kartoza/postgis:13-3.1--v2021.09.08
    volumes:
      - ./pg/postgres_data:/var/lib/postgresql
      - ./backups:/backups
    environment:
      - POSTGRES_USER=docker
      - POSTGRES_PASS=docker
      - ALLOW_IP_RANGE=0.0.0.0/0
    links:
      - pycsw:pycsw
    restart: on-failure:5
    shm_size: 1g

  rabbitmq:
    image: library/rabbitmq:3.9.5
    hostname: rabbitmq
    environment:
       - RABBIT_PASSWORD=rabbit_test_password
       - USER=rabbit_user
       - RABBITMQ_NODENAME=rabbit

  worker:
    build:
      context: ..
      dockerfile: deployment/docker/Dockerfile
      target: dev_image
    hostname: worker
    command: celery worker -A catalogue.celery -l info  --beat
    environment:
      - DATABASE_NAME=gis
      - DATABASE_USERNAME=docker
      - DATABASE_PASSWORD=docker
      - DATABASE_HOST=db
      - RABBITMQ_HOST=rabbitmq
      - DJANGO_SETTINGS_MODULE=core.settings.prod_docker
      - VIRTUAL_HOST=catalogue.kartoza.org
      - VIRTUAL_PORT=8080
      - C_FORCE_ROOT=true
    volumes:
      - ../django_project:/home/web/django_project
      - ./static:/home/web/static
      - ./media:/home/web/media
      - ./reports:/home/web/reports
      - ./logs:/var/log/
    links:
      - smtp:smtp
      - db:db
      - rabbitmq:rabbitmq

  uwsgi:
    # Note you cannot scale if you use conteiner_name
    container_name: catalogue-uwsgi
    build:
      context: ..
      dockerfile: deployment/docker/Dockerfile
      target: base_image
    hostname: uwsgi
    environment:
      - DATABASE_NAME=gis
      - DATABASE_USERNAME=docker
      - DATABASE_PASSWORD=docker
      - DATABASE_HOST=db
      - RABBITMQ_HOST=rabbitmq
      - DJANGO_SETTINGS_MODULE=core.settings.prod_docker
      - VIRTUAL_HOST=catalogue.kartoza.com
      - VIRTUAL_PORT=8080
    volumes:
      - ../django_project:/home/web/django_project
      - ./static:/home/web/static
      - ./media:/home/web/media
      - ./reports:/home/web/reports
      - ./logs:/var/log/
      - ./data:/home/web/django_project/data
      - /dmz/CATALOGUE/thumbnails_cat3:/home/web/django_project/thumbs_out
      - ../logs:/home/web/logs/
      - ../resources:/home/web/resources

    links:
      - smtp:smtp
      - db:db
      - rabbitmq:rabbitmq
      - worker:worker
    restart: on-failure:5

  dbbackups:
    # Note you cannot scale if you use conteiner_name
    container_name: catalogue-db-backups
    build: docker-backup
    hostname: pg-backups
    volumes:
      - ./backups:/backups
      - ./static/visitor:/visitor
    links:
      - db:db
    environment:
      # take care to let the project name below match that
      # declared in the top of the makefile
      - DUMPPREFIX=PG_catalogue
      # These are all defaults anyway, but setting explicitly in
      # case we ever want to ever use different credentials
      - PGUSER=docker
      - PGPASSWORD=docker
      - PGPORT=5432
      - PGHOST=db
      - PGDATABASE=gis
    restart: on-failure:5

  # This is normally the main entry point for a production server
  web:
    # Note you cannot scale if you use conteiner_name
    container_name: catalogue-web
    image: nginx:1.21.3
    hostname: nginx
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
    volumes:
      - ./sites-enabled:/etc/nginx/conf.d:ro
      # I dont use volumes_from as I want to use the ro modifier
      - ./static:/home/web/static:ro
      - ./media:/home/web/media:ro
      - ./logs:/var/log/nginx
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    links:
      - uwsgi:uwsgi
    ports:
      - "80:80"
      - "443:443"
    restart: on-failure:5

  certbot:
    image: certbot/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    volumes:
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot

  # This is the entry point for a development server.
  # Run with --no-deps to run attached to the services
  # from produ environment if wanted
  devweb:
    # Note you cannot scale if you use conteiner_name
    container_name: catalogue-dev-web
    build:
      context: ..
      dockerfile: deployment/docker/Dockerfile
      target: dev_image
    hostname: uwsgi
    environment:
      - RABBITMQ_HOST=rabbitmq
      - DJANGO_SETTINGS_MODULE=core.settings.dev_docker
      - PYTHONPATH=/home/web/django_project
      - VIRTUAL_HOST=catalogue.kartoza.com
      - VIRTUAL_PORT=8080
    volumes:
      - ../django_project:/home/web/django_project
      - ./static:/home/web/static
      - ./media:/home/web/media
      - ./reports:/home/web/reports
      - ./logs:/var/log/
      - ./data:/home/web/django_project/data
      - ../resources:/home/web/resources
    links:
      - smtp:smtp
      - db:db
      - rabbitmq:rabbitmq
      - worker:worker
    ports:
      # for django test server
      - "8080:8080"
      # for ssh
      - "8001:22"
  check_db:
    image: schaffdev/port_check:latest
    environment:
      - CHECK_HOST=db
      - CHECK_PORT=5432
  pycsw:
    container_name: catalogue-pycsw
    image: geopython/pycsw
    environment:
      PYCSW_SERVER_URL: http://localhost:8000
    volumes:
      - ./docker/pycsw.cfg:/etc/pycsw/pycsw.cfg
    ports:
      - "8000:8000"




