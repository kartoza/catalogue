# Generated by Django 2.2.28 on 2023-06-06 12:49

import django.contrib.gis.db.models.fields
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('exchange', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Collection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Collection name as defined by operator.', max_length=255, unique=True, verbose_name='Collection name')),
                ('description', models.TextField(help_text='Detailed description for this collection', verbose_name='Collection description')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ImagingMode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='ImagingMode name', max_length=50)),
                ('incidence_angle_min', models.FloatField(help_text='Minimum incidence angle')),
                ('incidence_angle_max', models.FloatField(help_text='Maximum incidence angle')),
                ('approximate_resolution_m', models.FloatField(help_text='Approximate ImagingMode resolution in meters')),
                ('swath_width_km', models.FloatField(help_text='Swath width in kilometres')),
                ('number_of_looks', models.IntegerField(help_text='REPLACE ME!')),
                ('polarization', models.CharField(choices=[('HH', 'Horizontal-Horizontal'), ('HV', 'Horizontal-Vertical'), ('VH', 'Vertical-Horizontal'), ('VV', 'Vertical-Vertical')], help_text='Polarization type', max_length=2)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Institution',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('address1', models.CharField(max_length=255)),
                ('address2', models.CharField(max_length=255)),
                ('address3', models.CharField(max_length=255)),
                ('post_code', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='InstrumentType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('description', models.TextField(help_text='A detailed description of the instrument type.', verbose_name='Detailed description.')),
                ('abbreviation', models.CharField(max_length=20, unique=True)),
                ('operator_abbreviation', models.CharField(help_text='Instrument abbreviation as named by satellite owning institution.', max_length=255, unique=True)),
                ('is_radar', models.BooleanField(default=False, help_text='Mark true if this sensor captures RADAR data.', verbose_name='Is this a RADAR sensor?')),
                ('is_taskable', models.BooleanField(default=False, help_text='Can this sensor be tasked?')),
                ('is_searchable', models.BooleanField(default=True, help_text='Can this sensor be searched?')),
                ('swath_optical_km', models.IntegerField(blank=True, help_text='On-ground sensor swath width', null=True)),
                ('band_count', models.IntegerField(blank=True, help_text='Total number of bands for this Instrument', null=True)),
                ('band_type', models.TextField(blank=True, help_text='Semicolon delimited list of Instrument band types', null=True)),
                ('spectral_range_list_nm', models.CharField(blank=True, help_text='Semicolon delimited list of Instrument spectral ranges', max_length=100, null=True)),
                ('pixel_size_list_m', models.CharField(blank=True, help_text='Semicolon delimited list of Instrument pixel sizes', max_length=100, null=True)),
                ('spatial_resolution_range', models.CharField(blank=True, help_text='Semicolon delimited list of Instrument spatial resolutions', max_length=255, null=True)),
                ('quantization_bits', models.IntegerField(blank=True, help_text='Quantization bit rate - the aquisition bits per pixel for example 12 bit landsat 8. Note that products are likely delivered with a different bit depth to customers.', null=True)),
                ('image_size_km', models.CharField(blank=True, help_text='Human readable representation of image size', max_length=255, null=True)),
                ('processing_software', models.CharField(blank=True, help_text='Description of processing software', max_length=255, null=True)),
                ('keywords', models.CharField(blank=True, help_text='Keywords describing InstrumentType', max_length=255, null=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='InstrumentTypeProcessingLevel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('operator_processing_level_name', models.CharField(help_text='Operator original processing level name', max_length=50)),
                ('operator_processing_level_abbreviation', models.CharField(help_text='Operator original processing level abbreviation', max_length=4)),
                ('instrument_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dictionaries.InstrumentType')),
            ],
            options={
                'ordering': ['instrument_type', 'processing_level'],
            },
        ),
        migrations.CreateModel(
            name='License',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('details', models.TextField()),
                ('type', models.IntegerField(choices=[(1, 'Free'), (2, 'Government'), (3, 'Commercial')], default=3)),
            ],
        ),
        migrations.CreateModel(
            name='PlaceType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='ProcessingLevel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('abbreviation', models.CharField(max_length=4, unique=True)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('description', models.TextField(help_text='A detailed description of the processing level.', verbose_name='Detailed description.')),
            ],
            options={
                'ordering': ['abbreviation'],
            },
        ),
        migrations.CreateModel(
            name='ProductProcessState',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Full name of a product process state', max_length=30)),
            ],
        ),
        migrations.CreateModel(
            name='Projection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('epsg_code', models.IntegerField(unique=True)),
                ('name', models.CharField(max_length=128, unique=True, verbose_name='Name')),
            ],
            options={
                'verbose_name': 'Projection',
                'verbose_name_plural': 'Projections',
                'ordering': ('epsg_code', 'name'),
            },
        ),
        migrations.CreateModel(
            name='Quality',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
            ],
            options={
                'verbose_name': 'Quality',
                'verbose_name_plural': 'Qualities',
            },
        ),
        migrations.CreateModel(
            name='ReferenceSystem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('description', models.TextField(help_text='A detailed description of the reference system.', verbose_name='Detailed description.')),
                ('abbreviation', models.CharField(max_length=20)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='SalesRegion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Full name of a sales region', max_length=50)),
                ('abbreviation', models.CharField(max_length=4)),
            ],
        ),
        migrations.CreateModel(
            name='Satellite',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('description', models.TextField(help_text='A detailed description of the satellite.', verbose_name='Detailed description.')),
                ('abbreviation', models.CharField(max_length=20, unique=True)),
                ('operator_abbreviation', models.CharField(help_text='Satellite abbreviation as named by satellite owning institution.', max_length=255, unique=True)),
                ('launch_date', models.DateField(blank=True, help_text='Satellite launch date', null=True)),
                ('status', models.TextField(blank=True, help_text='Information about satellite operational status', null=True)),
                ('altitude_km', models.IntegerField(blank=True, help_text='Satellite altitude in kilometres', null=True)),
                ('orbit', models.TextField(blank=True, help_text='Satellite orbit description', null=True)),
                ('revisit_time_days', models.IntegerField(blank=True, help_text='Days elapsed between observations of the same point', null=True)),
                ('reference_url', models.URLField(blank=True, help_text='Satellite mission URL', null=True)),
                ('collection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dictionaries.Collection')),
                ('license_type', models.ForeignKey(help_text='Satellite product license type', on_delete=django.db.models.deletion.CASCADE, to='dictionaries.License')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ScannerType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('description', models.TextField(help_text='A detailed description of the scanner type.', verbose_name='Detailed description.')),
                ('abbreviation', models.CharField(max_length=20, unique=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='SpectralGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('description', models.TextField(help_text='A detailed description of the spectral mode.', verbose_name='Detailed description.')),
                ('abbreviation', models.CharField(max_length=20, unique=True)),
            ],
            options={
                'ordering': ['abbreviation', 'name'],
            },
        ),
        migrations.CreateModel(
            name='SpectralMode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('description', models.TextField(help_text='A detailed description of the spectral mode.', verbose_name='Detailed description.')),
                ('abbreviation', models.CharField(max_length=20)),
                ('instrument_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dictionaries.InstrumentType')),
                ('spectralgroup', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dictionaries.SpectralGroup')),
            ],
            options={
                'ordering': ['abbreviation', 'name'],
            },
        ),
        migrations.CreateModel(
            name='SubsidyType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Full name of a subsidy type', max_length=50)),
                ('abbreviation', models.CharField(max_length=10)),
            ],
        ),
        migrations.CreateModel(
            name='Topic',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('abbreviation', models.CharField(max_length=10, unique=True)),
                ('name', models.CharField(max_length=255, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Unit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('abbreviation', models.CharField(max_length=10, unique=True)),
                ('name', models.CharField(max_length=255, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='SpectralModeProcessingCosts',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cost_per_scene', models.DecimalField(decimal_places=2, help_text='Cost per scene', max_digits=10)),
                ('cost_per_square_km', models.DecimalField(blank=True, decimal_places=2, help_text='Cost per square kilometre', max_digits=10, null=True)),
                ('minimum_square_km', models.FloatField(blank=True, help_text='Minimum number of square kilometers that can be ordered for aprice of per kilometer', null=True)),
                ('currency', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='exchange.Currency')),
                ('instrument_type_processing_level', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dictionaries.InstrumentTypeProcessingLevel')),
                ('sales_region', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='dictionaries.SalesRegion')),
                ('spectral_mode', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dictionaries.SpectralMode')),
            ],
            options={
                'ordering': ['spectral_mode', 'instrument_type_processing_level'],
            },
        ),
        migrations.CreateModel(
            name='SatelliteInstrumentGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('instrument_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dictionaries.InstrumentType')),
                ('satellite', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dictionaries.Satellite')),
            ],
            options={
                'ordering': ['satellite', 'instrument_type'],
                'unique_together': {('satellite', 'instrument_type')},
            },
        ),
        migrations.CreateModel(
            name='SatelliteInstrument',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('description', models.TextField(help_text='A detailed description of the satellite instrument.', verbose_name='Detailed description.')),
                ('abbreviation', models.CharField(max_length=20, unique=True)),
                ('operator_abbreviation', models.CharField(help_text='Satellite abbreviation as named by satellite owning institution.', max_length=255, unique=True)),
                ('satellite_instrument_group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dictionaries.SatelliteInstrumentGroup')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='RadarProductProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('imaging_mode', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dictionaries.ImagingMode')),
                ('satellite_instrument', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dictionaries.SatelliteInstrument')),
            ],
            options={
                'ordering': ['satellite_instrument', 'imaging_mode'],
            },
        ),
        migrations.CreateModel(
            name='RadarBeam',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('band_name', models.CharField(help_text='RadarBeam band name', max_length=50)),
                ('wavelength_cm', models.IntegerField(help_text='Band wavelength in centimetres')),
                ('looking_distance', models.CharField(help_text='REPLACE ME!', max_length=50)),
                ('azimuth_direction', models.CharField(help_text='REPLACE ME!', max_length=50)),
                ('instrument_type', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='dictionaries.InstrumentType')),
            ],
            options={
                'ordering': ['instrument_type'],
            },
        ),
        migrations.CreateModel(
            name='Place',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('geometry', django.contrib.gis.db.models.fields.PointField(help_text='Place geometry', srid=4326)),
                ('place_type', models.ForeignKey(help_text='Type of place', on_delete=django.db.models.deletion.CASCADE, to='dictionaries.PlaceType')),
            ],
        ),
        migrations.CreateModel(
            name='OpticalProductProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('satellite_instrument', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dictionaries.SatelliteInstrument')),
                ('spectral_mode', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dictionaries.SpectralMode')),
            ],
            options={
                'ordering': ['satellite_instrument', 'spectral_mode'],
            },
        ),
        migrations.AddField(
            model_name='instrumenttypeprocessinglevel',
            name='processing_level',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dictionaries.ProcessingLevel'),
        ),
        migrations.AddField(
            model_name='instrumenttype',
            name='base_processing_level',
            field=models.ForeignKey(blank=True, help_text='Processing level as provided by the ground station as "raw data".', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='base_processing_level', to='dictionaries.ProcessingLevel'),
        ),
        migrations.AddField(
            model_name='instrumenttype',
            name='default_processing_level',
            field=models.ForeignKey(blank=True, help_text='Default processing level that will be supplied to customers.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='default_processing_level', to='dictionaries.ProcessingLevel'),
        ),
        migrations.AddField(
            model_name='instrumenttype',
            name='reference_system',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dictionaries.ReferenceSystem'),
        ),
        migrations.AddField(
            model_name='instrumenttype',
            name='scanner_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dictionaries.ScannerType'),
        ),
        migrations.AddField(
            model_name='imagingmode',
            name='radarbeam',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dictionaries.RadarBeam'),
        ),
        migrations.AddField(
            model_name='collection',
            name='institution',
            field=models.ForeignKey(help_text='Organisation that owns this satellite collection.', on_delete=django.db.models.deletion.CASCADE, to='dictionaries.Institution'),
        ),
        migrations.CreateModel(
            name='Band',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('band_name', models.CharField(max_length=50)),
                ('band_abbr', models.CharField(blank=True, max_length=20)),
                ('band_number', models.IntegerField(help_text='Instrument specific band number, e.g. 1,2, ...')),
                ('min_wavelength_nm', models.IntegerField(help_text='Lower band wavelength in nanometeres')),
                ('max_wavelength_nm', models.IntegerField(help_text='Upper band wavelength in nanometeres')),
                ('pixelsize_resampled_m', models.FloatField(help_text='Pixel size in m (resolution) resampled')),
                ('pixelsize_acquired_m', models.FloatField(help_text='Pixel size in m (resolution) acquired')),
                ('instrument_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dictionaries.InstrumentType')),
            ],
            options={
                'ordering': ['instrument_type', 'band_name'],
            },
        ),
        migrations.CreateModel(
            name='BandSpectralMode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('band', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dictionaries.Band')),
                ('spectral_mode', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dictionaries.SpectralMode')),
            ],
            options={
                'ordering': ['band', 'spectral_mode'],
                'unique_together': {('band', 'spectral_mode')},
            },
        ),
    ]
