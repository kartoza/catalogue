# Generated by Django 2.2.28 on 2025-02-14 14:38

from django.conf import settings
import django.contrib.gis.db.models.fields
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('exchange', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('orders', '0003_auto_20220706_2216'),
        ('catalogue', '0002_allusersmessage_contact_continuousproduct_genericimageryproduct_genericproduct_genericsensorproduct_'),
        ('dictionaries', '0002_auto_20230606_1250'),
    ]

    operations = [
        migrations.CreateModel(
            name='Search',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('geometry', django.contrib.gis.db.models.fields.PolygonField(blank=True, help_text='Digitising an area of interest is not required but is recommended.', null=True, srid=4326)),
                ('ip_position', django.contrib.gis.db.models.fields.PointField(blank=True, null=True, srid=4326)),
                ('search_date', models.DateTimeField(auto_now_add=True, help_text='When the search was made - not shown to users', verbose_name='Search Date')),
                ('guid', models.CharField(max_length=40, unique=True)),
                ('deleted', models.NullBooleanField(default=True, help_text='Mark this search as deleted so the user does not see it', verbose_name='Deleted?')),
                ('record_count', models.IntegerField(blank=True, editable=False, null=True)),
                ('k_orbit_path', models.CharField(blank=True, help_text='Path (K) value. If specified here, geometry will be ignored. Must be a value between 1 and 233. Can also be specified as a comma separated list of values or a range. Will be ignored if sensor type does not include J/K metadata.', max_length=255, null=True)),
                ('j_frame_row', models.CharField(blank=True, help_text='Row (J) value. If specified here, geometry will be ignored. Must be a value between 1 and 248. Can also be specified as a comma separated list of values or a range. Will be ignored if sensor type does not include J/K metadata.', max_length=255, null=True)),
                ('use_cloud_cover', models.BooleanField(default=False, help_text='If you want to limit searches to optical products with a certain cloud cover, enable this.', verbose_name='Use cloud cover?')),
                ('cloud_max', models.IntegerField(blank=True, null=True, verbose_name='Max Clouds')),
                ('cloud_min', models.IntegerField(blank=True, null=True, verbose_name='Min Clouds')),
                ('band_count', models.IntegerField(blank=True, choices=[(0, 'Panchromatic'), (1, 'True colour (3 bands RGB)'), (2, 'Multispectral (4 - 8 bands)'), (3, 'Superspectral (9 - 40 bands)'), (4, 'Hyperspectral (> 41 bands)')], help_text='Select the spectral resolution.', null=True)),
                ('spatial_resolution', models.IntegerField(blank=True, choices=[(0, '<= 1m'), (1, '1m - 2m'), (2, '2m - 6m'), (3, '6m - 20m'), (4, '20m - 35m'), (5, '35m - 60m')], help_text='Select mean spatial resolution class.', null=True, verbose_name='Spatial resolution')),
                ('sensor_inclination_angle_start', models.FloatField(blank=True, help_text='Enter a minimum sensor inclination angle.', null=True)),
                ('sensor_inclination_angle_end', models.FloatField(blank=True, help_text='Enter a maximum sensor inclination angle.', null=True)),
                ('collection', models.ManyToManyField(blank=True, help_text='Select one or more satellite collections.', to='dictionaries.Collection')),
                ('instrument_type', models.ManyToManyField(blank=True, help_text='Choosing one or more instrument types is required. Use ctrl-click to select more than one.', to='dictionaries.InstrumentType', verbose_name='Sensors')),
                ('license_type', models.ManyToManyField(blank=True, help_text='Choose a license type.', to='dictionaries.License')),
                ('processing_level', models.ManyToManyField(blank=True, help_text='Select one or more processing level.', to='dictionaries.ProcessingLevel')),
                ('satellite', models.ManyToManyField(blank=True, help_text='Select satellite mission.', to='dictionaries.Satellite')),
                ('spectral_group', models.ManyToManyField(blank=True, help_text='Select one or more spectral groups.', to='dictionaries.SpectralGroup')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Search',
                'verbose_name_plural': 'Searches',
                'ordering': ('search_date',),
            },
        ),
        migrations.CreateModel(
            name='SearchRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('internal_order_id', models.IntegerField(blank=True, null=True)),
                ('download_path', models.CharField(help_text='This is the location from where the product can be downloaded after a successfull OS4EO order placement.', max_length=512)),
                ('product_ready', models.BooleanField(default=False)),
                ('cost_per_scene', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('rand_cost_per_scene', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('currency', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='exchange.Currency')),
                ('order', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='orders.Order')),
                ('processing_level', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dictionaries.ProcessingLevel', verbose_name='Processing Level')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='catalogue.GenericProduct')),
                ('product_process_state', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dictionaries.ProductProcessState')),
                ('projection', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dictionaries.Projection', verbose_name='Projection')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Record',
                'verbose_name_plural': 'Records',
            },
        ),
        migrations.CreateModel(
            name='SearchDateRange',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateField(help_text='Product date is required. DD-MM-YYYY.')),
                ('end_date', models.DateField(help_text='Product date is required. DD-MM-YYYY.')),
                ('search', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='search.Search')),
            ],
        ),
        migrations.CreateModel(
            name='Clip',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('guid', models.CharField(max_length=40)),
                ('date', models.DateTimeField(auto_now_add=True, help_text='Not shown to users', verbose_name='Date')),
                ('image', models.CharField(choices=[(0, 'zaSpot2mMosaic2009'), (1, 'zaSpot2mMosaic2008'), (2, 'zaSpot2mMosaic2007')], max_length=20)),
                ('geometry', django.contrib.gis.db.models.fields.PolygonField(srid=4326)),
                ('status', models.CharField(choices=[(0, 'submitted'), (1, 'in process'), (2, 'completed')], max_length=20)),
                ('result_url', models.URLField(max_length=1024)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Clip',
                'verbose_name_plural': 'Clips',
            },
        ),
    ]
